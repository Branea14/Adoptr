"""empty message

Revision ID: c2d2a0fb8b71
Revises: ffdc0a98111c
Create Date: 2025-02-23 00:59:14.532996

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from sqlalchemy import Text


# revision identifiers, used by Alembic.
revision = 'c2d2a0fb8b71'
down_revision = 'ffdc0a98111c'
branch_labels = None
depends_on = None


pet_experience_enum = sa.Enum('firstTime', 'previous', 'current', name='pet_experience')
ideal_age_enum = sa.Enum('noPreference', 'puppy', 'young', 'adult', 'senior', name='ideal_age')
ideal_sex_enum = sa.Enum('noPreference', 'male', 'female', name='ideal_sex')
ideal_size_enum = sa.Enum('noPreference', 'small', 'medium', 'large', 'xl', name='ideal_size')
lifestyle_enum = sa.Enum('noPreference', 'veryActive', 'active', 'laidback', 'lapPet', name='lifestyle')

def is_postgresql():
    return op.get_bind().dialect.name == 'postgresql'

def upgrade():

    if is_postgresql():
        # Explicitly drop the ENUM before recreating it
        op.execute("""
        DO $$
        BEGIN
            IF EXISTS (SELECT 1 FROM pg_type WHERE typname = 'pet_experience') THEN
                DROP TYPE pet_experience CASCADE;
            END IF;
            IF EXISTS (SELECT 1 FROM pg_type WHERE typname = 'ideal_age') THEN
                DROP TYPE ideal_age CASCADE;
            END IF;
            IF EXISTS (SELECT 1 FROM pg_type WHERE typname = 'ideal_sex') THEN
                DROP TYPE ideal_sex CASCADE;
            END IF;
            IF EXISTS (SELECT 1 FROM pg_type WHERE typname = 'ideal_size') THEN
                DROP TYPE ideal_size CASCADE;
            END IF;
            IF EXISTS (SELECT 1 FROM pg_type WHERE typname = 'lifestyle') THEN
                DROP TYPE lifestyle CASCADE;
            END IF;
        END $$;
        """)

        # Now recreate ENUMs
        op.execute("""
        DO $$
        BEGIN
            CREATE TYPE pet_experience AS ENUM ('firstTime', 'previous', 'current');
            CREATE TYPE ideal_age AS ENUM ('noPreference', 'puppy', 'young', 'adult', 'senior');
            CREATE TYPE ideal_sex AS ENUM ('noPreference', 'male', 'female');
            CREATE TYPE ideal_size AS ENUM ('noPreference', 'small', 'medium', 'large', 'xl');
            CREATE TYPE lifestyle AS ENUM ('noPreference', 'veryActive', 'active', 'laidback', 'lapPet');
        END $$;
        """)

    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('pets',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('sellerId', sa.Integer(), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('breed', sa.String(length=255), nullable=False),
    sa.Column('vaccinated', sa.Boolean(), nullable=False),
    sa.Column('color', sa.String(length=50), nullable=False),
    sa.Column('ownerSurrender', sa.Boolean(), nullable=False),
    sa.Column('age', sa.Enum('puppy', 'young', 'adult', 'senior', name='age'), nullable=False),
    sa.Column('sex', sa.Enum('male', 'female', name='sex'), nullable=False),
    sa.Column('size', sa.Enum('small', 'medium', 'large', 'xl', name='size'), nullable=False),
    sa.Column('adoptionStatus', sa.Enum('available', 'pendingAdoption', 'adopted', name='adoption_status'), nullable=False),
    sa.Column('loveLanguage', sa.Enum('physicalTouch', 'treats', 'play', 'training', 'independent', name='love_language'), nullable=False),
    sa.Column('lifestyle', sa.Enum('veryActive', 'active', 'laidback', 'lapPet', name='lifestyle'), nullable=False),
    sa.Column('household', sa.JSON(), nullable=False),
    sa.Column('careAndBehavior', sa.JSON(), nullable=False),
    sa.Column('createdAt', sa.DateTime(), nullable=False),
    sa.Column('updatedAt', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['sellerId'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('reviews',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('sellerId', sa.Integer(), nullable=False),
    sa.Column('reviewerId', sa.Integer(), nullable=False),
    sa.Column('review', sa.Text(), nullable=False),
    sa.Column('stars', sa.Integer(), nullable=False),
    sa.Column('createdAt', sa.DateTime(), nullable=False),
    sa.Column('updatedAt', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['reviewerId'], ['users.id'], ),
    sa.ForeignKeyConstraint(['sellerId'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('chat_history',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('senderId', sa.Integer(), nullable=False),
    sa.Column('receiverId', sa.Integer(), nullable=False),
    sa.Column('petId', sa.Integer(), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('status', sa.Enum('SENT', 'DELIVERED', 'READ', name='status'), nullable=False),
    sa.Column('createdAt', sa.DateTime(), nullable=False),
    sa.Column('updatedAt', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['petId'], ['pets.id'], ),
    sa.ForeignKeyConstraint(['receiverId'], ['users.id'], ),
    sa.ForeignKeyConstraint(['senderId'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('matches',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('userId1', sa.Integer(), nullable=False),
    sa.Column('userId2', sa.Integer(), nullable=False),
    sa.Column('petId', sa.Integer(), nullable=False),
    sa.Column('status', sa.Enum('REQUESTED', 'APPROVED', 'REJECTED', name='status'), nullable=False),
    sa.Column('createdAt', sa.DateTime(), nullable=False),
    sa.Column('updatedAt', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['petId'], ['pets.id'], ),
    sa.ForeignKeyConstraint(['userId1'], ['users.id'], ),
    sa.ForeignKeyConstraint(['userId2'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('pet_images',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('petId', sa.Integer(), nullable=False),
    sa.Column('url', sa.Text(), nullable=False),
    sa.Column('preview', sa.Boolean(), nullable=False),
    sa.Column('createdAt', sa.DateTime(), nullable=False),
    sa.Column('updatedAt', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['petId'], ['pets.id'], ),
    sa.PrimaryKeyConstraint('id')
    )


    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.add_column(sa.Column('firstName', sa.String(length=255), nullable=False, server_default='Unknown'))
        batch_op.add_column(sa.Column('lastName', sa.String(length=255), nullable=False, server_default='Unknown'))
        batch_op.add_column(sa.Column('household', sa.JSON(), nullable=False))
        batch_op.add_column(sa.Column('careAndBehavior', sa.JSON(), nullable=False))
        batch_op.add_column(sa.Column('petExperience', sa.Enum('firstTime', 'previous', 'current', name='pet_experience'), nullable=False, server_default='firstTime'))
        batch_op.add_column(sa.Column('idealAge', sa.Enum('noPreference', 'puppy', 'young', 'adult', 'senior', name='ideal_age'), nullable=False, server_default='noPreference'))
        batch_op.add_column(sa.Column('idealSex', sa.Enum('noPreference', 'male', 'female', name='ideal_sex'), nullable=False, server_default='noPreference'))
        batch_op.add_column(sa.Column('idealSize', sa.Enum('noPreference', 'small', 'medium', 'large', 'xl', name='ideal_size'), nullable=False, server_default='noPreference'))
        batch_op.add_column(sa.Column('lifestyle', sa.Enum('noPreference', 'veryActive', 'active', 'laidback', 'lapPet', name='lifestyle'), nullable=False, server_default=sa.text("'noPreference'")))
        batch_op.add_column(sa.Column('geohash', sa.String(length=12), nullable=False))
        batch_op.add_column(sa.Column('latitude', sa.Numeric(precision=10, scale=7), nullable=False))
        batch_op.add_column(sa.Column('longitude', sa.Numeric(precision=10, scale=7), nullable=False))
        batch_op.add_column(sa.Column('createdAt', sa.DateTime(), nullable=False))
        batch_op.add_column(sa.Column('updatedAt', sa.DateTime(), nullable=False))

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_column('updatedAt')
        batch_op.drop_column('createdAt')
        batch_op.drop_column('longitude')
        batch_op.drop_column('latitude')
        batch_op.drop_column('geohash')
        batch_op.drop_column('lifestyle')
        batch_op.drop_column('idealSize')
        batch_op.drop_column('idealSex')
        batch_op.drop_column('idealAge')
        batch_op.drop_column('petExperience')
        batch_op.drop_column('careAndBehavior')
        batch_op.drop_column('household')
        batch_op.drop_column('lastName')
        batch_op.drop_column('firstName')

    if is_postgresql():
        op.execute("""
        DROP TYPE IF EXISTS pet_experience;
        DROP TYPE IF EXISTS ideal_age;
        DROP TYPE IF EXISTS ideal_sex;
        DROP TYPE IF EXISTS ideal_size;
        DROP TYPE IF EXISTS lifestyle;
        """)

    op.drop_table('pet_images')
    op.drop_table('matches')
    op.drop_table('chat_history')
    op.drop_table('reviews')
    op.drop_table('pets')
    # ### end Alembic commands ###
